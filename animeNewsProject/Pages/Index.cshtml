@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<style>
    
    .content-container{
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100%;
    outline: none;
    }
    .section{
        margin: 96px;}
    .section-header {
        margin: 24px;
    
    }
    .card-set {
        --min-row-height: 320px;
        --stacked-col-max-height: 198px;
        display: grid;
        grid-gap: 8px;
        gap: 8px;
        grid-template-columns: repeat(6,1fr);
        grid-auto-flow: row;
        grid-auto-rows: minmax(var(--min-row-height),auto);
    }
    .article-card{
        grid-column: span 2;
    }

    .article-container {
        flex-direction: column-reverse;
    }

    .article-contents
    {
        display: grid;
        position: relative;
        align-self: start;
        margin: 24px;
        grid-gap: 8px;
        gap: 8px;
    }
    .card-image-container{
    display: flex;
    position: relative;
    align-items: center;
    justify-content: center;
    min-width: 200px;
    height: 200px;
    border-radius: 24px;
    background-color: var(--mio-theme-color-secondary-container);
    background-repeat: no-repeat;
    background-position: 50%;
    background-size: cover;
    overflow: hidden;
    z-index: 1
        }
        .section-2 {
        margin-top: 0px;    
        }
</style>

<div class="content-container">
    <div class="section">
        <div class="section-header">
            <h2>Featured Articles</h2>
        </div>
        <div class="card-set">
            @foreach (var article in Model.SearchResults?.OrderByDescending(a => a.Views).Take(3) ?? new List<AnimeArticle>())
            {
                <div class="article-card">
                    <a class="article-container" href="/news?id=@article.DocumentId">
                        <div class="article-contents">
                            <span class="title">@article.Title</span>
                            <div class="card-image-container" style="background-image: url('@(string.IsNullOrEmpty(article.Image) ? "/images/default.png" : article.Image)')">
                            </div>
                            <span class="subtitle"> @if (article.Text != null)
                                                    {
                                                        @TruncateText(article.Text, 100)
                                                    }</span>
                        </div>
                    </a>
                </div>
            }
        </div>
    </div>

    <div class="section section-2">
        <div class="section-header">
            <h2>Latest Articles</h2>
        </div>
        <div class="card-set">
            @foreach (var article in Model.SearchResults?.OrderByDescending(a => a.DatePublished)?.Take(6) ?? new List<AnimeArticle>())
            {
                <div class="article-card">
                    <a class="article-container" href="/news?id=@article.DocumentId">
                        <div class="article-contents">
                            <span class="title">@article.Title</span>
                            <div class="card-image-container" style="background-image: url('@(string.IsNullOrEmpty(article.Image) ? "/images/default.png" : article.Image)')">
                            </div>
                            <span class="subtitle"> @if (article.Text != null)
                                                    {
                                                        @TruncateText(article.Text, 100)
                                                    }
                            </span>
                        </div>
                    </a>
                </div>
            }
        </div>
    </div>
</div>

@functions {

    private string TruncateText(string? text, int maxLength)
    {
        if (text != null && text.Length > maxLength)
        {
            return text.Substring(0, maxLength) + "...";
        }
        return text ?? string.Empty;
    }
}
